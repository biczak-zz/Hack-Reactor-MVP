'use strict';

var express = require('express');
var app = express();
var path = require('path');
var bodyParser = require('body-parser');
var Team = require('./config.js');
var mongoose = require('mongoose');
var mongodbUri = 'mongodb://demo:demo@ds113871.mlab.com:13871/mvp';

mongoose.connect(mongodbUri);
var db = mongoose.connection;

app.use(bodyParser({ limit: '50mb' })); // to support JSON-encoded bodies
app.use(bodyParser.urlencoded({ // to support URL-encoded bodies
  extended: true
}));

app.use(express.static(path.join(__dirname, '../')));
app.post('/', function (req, res) {
  var userCollection = db.collection('teams');

  userCollection.insertOne({
    "name": req.body.Pokémon
  });
  console.log(req.body.Pokémon + ' has been added to your team!');
});
app.post('/team', function (req, res) {
  var userCollection = db.collection('teams');

  userCollection.find({
    "name": req.body.Pokémon
  }, function (err, obj) {
    if (err) {
      console.log('No');
    }
  });
});

app.get('/', function (error, response, body) {
  console.log('error:', error); // Print the error if one occurred
  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received
  console.log('body:', body); // Print the HTML for the Google homepage.
});
db.once('open', function () {
  console.log('Mongodb connection open');
});

app.listen(3000, function () {
  console.log('Example app listening on port 3000!');
});

var express = require('express');
var app = express();
var path = require('path');
var bodyParser = require('body-parser');
var MongoClient = require('mongodb').MongoClient;
var db;
var Team = require('./config.js');

app.use(bodyParser.json());

app.get('/', function (req, res) {
  res.sendFile(path.join(__dirname, '../'));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9zZXJ2ZXIuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJhcHAiLCJwYXRoIiwiYm9keVBhcnNlciIsIlRlYW0iLCJtb25nb29zZSIsIm1vbmdvZGJVcmkiLCJjb25uZWN0IiwiZGIiLCJjb25uZWN0aW9uIiwidXNlIiwibGltaXQiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJzdGF0aWMiLCJqb2luIiwiX19kaXJuYW1lIiwicG9zdCIsInJlcSIsInJlcyIsInVzZXJDb2xsZWN0aW9uIiwiY29sbGVjdGlvbiIsImluc2VydE9uZSIsImJvZHkiLCJQb2vDqW1vbiIsImNvbnNvbGUiLCJsb2ciLCJmaW5kIiwiZXJyIiwib2JqIiwiZ2V0IiwiZXJyb3IiLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJvbmNlIiwibGlzdGVuIiwiTW9uZ29DbGllbnQiLCJqc29uIiwic2VuZEZpbGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsVUFBVUMsUUFBUSxTQUFSLENBQWQ7QUFDQSxJQUFJQyxNQUFNRixTQUFWO0FBQ0EsSUFBSUcsT0FBT0YsUUFBUSxNQUFSLENBQVg7QUFDQSxJQUFJRyxhQUFhSCxRQUFRLGFBQVIsQ0FBakI7QUFDQSxJQUFJSSxPQUFPSixRQUFRLGFBQVIsQ0FBWDtBQUNBLElBQUlLLFdBQVdMLFFBQVEsVUFBUixDQUFmO0FBQ0EsSUFBSU0sYUFBYSxpREFBakI7O0FBRUFELFNBQVNFLE9BQVQsQ0FBaUJELFVBQWpCO0FBQ0EsSUFBSUUsS0FBS0gsU0FBU0ksVUFBbEI7O0FBRUFSLElBQUlTLEdBQUosQ0FBU1AsV0FBVyxFQUFDUSxPQUFPLE1BQVIsRUFBWCxDQUFULEUsQ0FBOEM7QUFDOUNWLElBQUlTLEdBQUosQ0FBUVAsV0FBV1MsVUFBWCxDQUFzQixFQUFNO0FBQ2xDQyxZQUFVO0FBRGtCLENBQXRCLENBQVI7O0FBSUFaLElBQUlTLEdBQUosQ0FBUVgsUUFBUWUsTUFBUixDQUFlWixLQUFLYSxJQUFMLENBQVVDLFNBQVYsRUFBcUIsS0FBckIsQ0FBZixDQUFSO0FBQ0FmLElBQUlnQixJQUFKLENBQVMsR0FBVCxFQUFjLFVBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFtQjtBQUMvQixNQUFJQyxpQkFBaUJaLEdBQUdhLFVBQUgsQ0FBYyxPQUFkLENBQXJCOztBQUVBRCxpQkFBZUUsU0FBZixDQUF5QjtBQUN2QixZQUFRSixJQUFJSyxJQUFKLENBQVNDO0FBRE0sR0FBekI7QUFHQUMsVUFBUUMsR0FBUixDQUFZUixJQUFJSyxJQUFKLENBQVNDLE9BQVQsR0FBbUIsK0JBQS9CO0FBQ0QsQ0FQRDtBQVFBdkIsSUFBSWdCLElBQUosQ0FBUyxPQUFULEVBQWtCLFVBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFtQjtBQUNuQyxNQUFJQyxpQkFBaUJaLEdBQUdhLFVBQUgsQ0FBYyxPQUFkLENBQXJCOztBQUVBRCxpQkFBZU8sSUFBZixDQUFvQjtBQUNsQixZQUFRVCxJQUFJSyxJQUFKLENBQVNDO0FBREMsR0FBcEIsRUFHQSxVQUFTSSxHQUFULEVBQWFDLEdBQWIsRUFBa0I7QUFDaEIsUUFBR0QsR0FBSCxFQUFRO0FBQ05ILGNBQVFDLEdBQVIsQ0FBWSxJQUFaO0FBQ0Q7QUFDRixHQVBEO0FBUUQsQ0FYRDs7QUFhQXpCLElBQUk2QixHQUFKLE1BQWEsVUFBVUMsS0FBVixFQUFpQkMsUUFBakIsRUFBMkJULElBQTNCLEVBQWlDO0FBQzVDRSxVQUFRQyxHQUFSLENBQVksUUFBWixFQUFzQkssS0FBdEIsRUFENEMsQ0FDZDtBQUM5Qk4sVUFBUUMsR0FBUixDQUFZLGFBQVosRUFBMkJNLFlBQVlBLFNBQVNDLFVBQWhELEVBRjRDLENBRWlCO0FBQzdEUixVQUFRQyxHQUFSLENBQVksT0FBWixFQUFxQkgsSUFBckIsRUFINEMsQ0FHaEI7QUFFN0IsQ0FMRDtBQU1BZixHQUFHMEIsSUFBSCxDQUFRLE1BQVIsRUFBZ0IsWUFBWTtBQUMxQlQsVUFBUUMsR0FBUixDQUFZLHlCQUFaO0FBQ0QsQ0FGRDs7QUFJQXpCLElBQUlrQyxNQUFKLENBQVcsSUFBWCxFQUFpQixZQUFZO0FBQzNCVixVQUFRQyxHQUFSLENBQVkscUNBQVo7QUFDRCxDQUZEOztBQUlBLElBQUkzQixVQUFVQyxRQUFRLFNBQVIsQ0FBZDtBQUNBLElBQUlDLE1BQU1GLFNBQVY7QUFDQSxJQUFJRyxPQUFPRixRQUFRLE1BQVIsQ0FBWDtBQUNBLElBQUlHLGFBQWFILFFBQVEsYUFBUixDQUFqQjtBQUNBLElBQUlvQyxjQUFjcEMsUUFBUSxTQUFSLEVBQW1Cb0MsV0FBckM7QUFDQSxJQUFJNUIsRUFBSjtBQUNBLElBQUlKLE9BQU9KLFFBQVEsYUFBUixDQUFYOztBQUdBQyxJQUFJUyxHQUFKLENBQVFQLFdBQVdrQyxJQUFYLEVBQVI7O0FBRUFwQyxJQUFJNkIsR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFTWixHQUFULEVBQWNDLEdBQWQsRUFBbUI7QUFDOUJBLE1BQUltQixRQUFKLENBQWFwQyxLQUFLYSxJQUFMLENBQVVDLFNBQVYsRUFBcUIsS0FBckIsQ0FBYjtBQUNELENBRkQiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG52YXIgYXBwID0gZXhwcmVzcygpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG52YXIgVGVhbSA9IHJlcXVpcmUoJy4vY29uZmlnLmpzJyk7XG52YXIgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xudmFyIG1vbmdvZGJVcmkgPSAnbW9uZ29kYjovL2RlbW86ZGVtb0BkczExMzg3MS5tbGFiLmNvbToxMzg3MS9tdnAnO1xuXG5tb25nb29zZS5jb25uZWN0KG1vbmdvZGJVcmkpO1xudmFyIGRiID0gbW9uZ29vc2UuY29ubmVjdGlvbjtcblxuYXBwLnVzZSggYm9keVBhcnNlcih7bGltaXQ6ICc1MG1iJ30pICk7ICAgICAgIC8vIHRvIHN1cHBvcnQgSlNPTi1lbmNvZGVkIGJvZGllc1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyAgICAgLy8gdG8gc3VwcG9ydCBVUkwtZW5jb2RlZCBib2RpZXNcbiAgZXh0ZW5kZWQ6IHRydWVcbn0pKTtcblxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vJykpKTtcbmFwcC5wb3N0KCcvJywgZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgdmFyIHVzZXJDb2xsZWN0aW9uID0gZGIuY29sbGVjdGlvbigndGVhbXMnKTtcblxuICB1c2VyQ29sbGVjdGlvbi5pbnNlcnRPbmUoe1xuICAgIFwibmFtZVwiOiByZXEuYm9keS5Qb2vDqW1vbixcbiAgfSk7XG4gIGNvbnNvbGUubG9nKHJlcS5ib2R5LlBva8OpbW9uICsgJyBoYXMgYmVlbiBhZGRlZCB0byB5b3VyIHRlYW0hJylcbn0pO1xuYXBwLnBvc3QoJy90ZWFtJywgZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgdmFyIHVzZXJDb2xsZWN0aW9uID0gZGIuY29sbGVjdGlvbigndGVhbXMnKTtcblxuICB1c2VyQ29sbGVjdGlvbi5maW5kKHtcbiAgICBcIm5hbWVcIjogcmVxLmJvZHkuUG9rw6ltb24sXG4gIH0sXG4gIGZ1bmN0aW9uKGVycixvYmopIHtcbiAgICBpZihlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdObycpO1xuICAgIH1cbiAgfSlcbn0pO1xuXG5hcHAuZ2V0KGAvYCwgZnVuY3Rpb24gKGVycm9yLCByZXNwb25zZSwgYm9keSkge1xuICBjb25zb2xlLmxvZygnZXJyb3I6JywgZXJyb3IpOyAvLyBQcmludCB0aGUgZXJyb3IgaWYgb25lIG9jY3VycmVkXG4gIGNvbnNvbGUubG9nKCdzdGF0dXNDb2RlOicsIHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUpOyAvLyBQcmludCB0aGUgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgaWYgYSByZXNwb25zZSB3YXMgcmVjZWl2ZWRcbiAgY29uc29sZS5sb2coJ2JvZHk6JywgYm9keSk7IC8vIFByaW50IHRoZSBIVE1MIGZvciB0aGUgR29vZ2xlIGhvbWVwYWdlLlxuXG59KTtcbmRiLm9uY2UoJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnNvbGUubG9nKCdNb25nb2RiIGNvbm5lY3Rpb24gb3BlbicpO1xufSk7XG5cbmFwcC5saXN0ZW4oMzAwMCwgZnVuY3Rpb24gKCkge1xuICBjb25zb2xlLmxvZygnRXhhbXBsZSBhcHAgbGlzdGVuaW5nIG9uIHBvcnQgMzAwMCEnKVxufSk7XG5cbnZhciBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIGFwcCA9IGV4cHJlc3MoKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpO1xudmFyIE1vbmdvQ2xpZW50ID0gcmVxdWlyZSgnbW9uZ29kYicpLk1vbmdvQ2xpZW50XG52YXIgZGI7XG52YXIgVGVhbSA9IHJlcXVpcmUoJy4vY29uZmlnLmpzJyk7XG5cblxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSlcblxuYXBwLmdldCgnLycsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XG4gIHJlcy5zZW5kRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vJykpO1xufSk7XG4iXX0=